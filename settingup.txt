## **What Each File Will Hold (Consolidated)**

### **app/ (Application Setup)**

**`__init__.py`**

- Creates Flask app
- Initializes database, JWT, CORS
- Registers all routes


**`config.py`**

- Database URL, JWT secret, environment settings


**`extensions.py`**

- Database instance, JWT manager, CORS config


---

### **models/ (Database Structure Only)**

**`user.py`**

- User table fields: id, name, email, password_hash, created_at
- No logic, just structure


**`mood.py`**

- Mood table fields: id, user_id, mood_level, emotion_label, notes, created_at
- No logic, just structure


**`journal.py`**

- Journal table fields: id, user_id, title, content, created_at, updated_at
- No logic, just structure


---

### **routes/ (Everything Together - Validation + Logic + Requests)**

**`auth.py`** - ALL user authentication in one file

- **Validation:** Check email format, password strength, required fields
- **Logic:** Hash password, create JWT token, verify credentials
- **Requests:** Handle POST /register, POST /login, POST /logout, GET /me


**`moods.py`** - ALL mood operations in one file

- **Validation:** Check mood level (1-10), emotion type, required fields
- **Logic:** Save mood, calculate stats, format data
- **Requests:** Handle POST /moods, GET /moods, PUT /moods/`<id>`, DELETE /moods/`<id>`


**`journals.py`** - ALL journal operations in one file

- **Validation:** Check title/content not empty, required fields
- **Logic:** Save entry, update entry, search entries
- **Requests:** Handle POST /journals, GET /journals, PUT /journals/`<id>`, DELETE /journals/`<id>`


---

### **middleware/ (Simplified)**

**`auth.py`**

- JWT token verification decorator
- Extracts user ID from token
- Protects routes


---

### **migrations/**

- Database schema creation scripts


---

### **tests/**

- Unit tests for each route


---

### **Root Files**

**`.env`** - Database URL, JWT secret, environment

**`requirements.txt`** - Python dependencies

**`run.py`** - Start the server

---

## **Key Differences from Previous Structure**

| Old Structure | New Structure
|-----|-----
| Validation in `schemas/` | Validation in `routes/`
| Logic in `controllers/` | Logic in `routes/`
| Requests in `routes/` | Requests in `routes/`
| Utilities scattered | Utilities inline in routes
| **Result:** Fragmented | **Result:** Consolidated & Simple


---

## **Example: How auth.py Will Look**

```plaintext
auth.py will contain:
1. Email validation function
2. Password hashing function
3. JWT token creation function
4. Register endpoint (validates + hashes + saves)
5. Login endpoint (validates + verifies + creates token)
6. Logout endpoint
7. Get current user endpoint
```

All in **one file** - easy to find and modify!

---

**Ready to start building with this structure?** I can create:

1. **Backend setup** (models + routes + auth)
2. **Frontend setup** (React + auth)
3. **Both together**